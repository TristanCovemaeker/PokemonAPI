// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonAPI.Data;

namespace PokemonAPI.Migrations
{
    [DbContext(typeof(PokemonContext))]
    partial class PokemonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("PokemonAPI.Models.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ability");
                });

            modelBuilder.Entity("PokemonAPI.Models.AbilityPokemon", b =>
                {
                    b.Property<Guid>("AbilityPokemonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PokemonIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityPokemonId");

                    b.HasIndex("PokemonIdId");

                    b.ToTable("AbilityPokemon");
                });

            modelBuilder.Entity("PokemonAPI.Models.PokeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PokeType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d92439b1-867a-41ba-a19b-41f169662960"),
                            Name = "Bug"
                        },
                        new
                        {
                            Id = new Guid("e5348acd-2ca1-4697-a3f7-2daa82a4eb35"),
                            Name = "Dark"
                        },
                        new
                        {
                            Id = new Guid("9ada388c-956b-45ad-9f6f-a4e1d735120f"),
                            Name = "Fire"
                        });
                });

            modelBuilder.Entity("PokemonAPI.Models.PokeTypePokemon", b =>
                {
                    b.Property<Guid>("PokemonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PokeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PokemonId", "PokeTypeId");

                    b.HasIndex("PokeTypeId");

                    b.ToTable("PokeTypePokemon");
                });

            modelBuilder.Entity("PokemonAPI.Models.Pokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AgainstBug")
                        .HasColumnType("real");

                    b.Property<float>("AgainstDark")
                        .HasColumnType("real");

                    b.Property<float>("AgainstDragon")
                        .HasColumnType("real");

                    b.Property<float>("AgainstElectric")
                        .HasColumnType("real");

                    b.Property<float>("AgainstFairy")
                        .HasColumnType("real");

                    b.Property<float>("AgainstFight")
                        .HasColumnType("real");

                    b.Property<float>("AgainstFire")
                        .HasColumnType("real");

                    b.Property<float>("AgainstFlying")
                        .HasColumnType("real");

                    b.Property<float>("AgainstGhost")
                        .HasColumnType("real");

                    b.Property<float>("AgainstGrass")
                        .HasColumnType("real");

                    b.Property<float>("AgainstGround")
                        .HasColumnType("real");

                    b.Property<float>("AgainstIce")
                        .HasColumnType("real");

                    b.Property<float>("AgainstNormal")
                        .HasColumnType("real");

                    b.Property<float>("AgainstPoison")
                        .HasColumnType("real");

                    b.Property<float>("AgainstPsychic")
                        .HasColumnType("real");

                    b.Property<float>("AgainstRock")
                        .HasColumnType("real");

                    b.Property<float>("AgainstSteel")
                        .HasColumnType("real");

                    b.Property<float>("AgainstWater")
                        .HasColumnType("real");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("BaseEggSteps")
                        .HasColumnType("int");

                    b.Property<int>("BaseHappiness")
                        .HasColumnType("int");

                    b.Property<int>("BaseTotal")
                        .HasColumnType("int");

                    b.Property<int>("CaptureRate")
                        .HasColumnType("int");

                    b.Property<string>("Classification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceGrowth")
                        .HasColumnType("int");

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.Property<float>("HeightM")
                        .HasColumnType("real");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("bit");

                    b.Property<string>("JapaneseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PercentageMale")
                        .HasColumnType("real");

                    b.Property<int>("PokedexNumber")
                        .HasColumnType("int");

                    b.Property<int>("SpAttack")
                        .HasColumnType("int");

                    b.Property<int>("SpDefense")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<float>("WeightKg")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("Pokemon");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3d978ea-3b28-4fad-af3b-ab301f478d5e"),
                            AgainstBug = 0f,
                            AgainstDark = 0f,
                            AgainstDragon = 0f,
                            AgainstElectric = 0f,
                            AgainstFairy = 0f,
                            AgainstFight = 0f,
                            AgainstFire = 0f,
                            AgainstFlying = 0f,
                            AgainstGhost = 0f,
                            AgainstGrass = 0f,
                            AgainstGround = 0f,
                            AgainstIce = 0f,
                            AgainstNormal = 0f,
                            AgainstPoison = 0f,
                            AgainstPsychic = 0f,
                            AgainstRock = 0f,
                            AgainstSteel = 0f,
                            AgainstWater = 0f,
                            Attack = 0,
                            BaseEggSteps = 0,
                            BaseHappiness = 0,
                            BaseTotal = 0,
                            CaptureRate = 0,
                            Defense = 0,
                            ExperienceGrowth = 0,
                            Generation = 0,
                            HeightM = 0f,
                            Hp = 0,
                            IsLegendary = false,
                            Name = "Bug",
                            PercentageMale = 0f,
                            PokedexNumber = 0,
                            SpAttack = 0,
                            SpDefense = 0,
                            Speed = 0,
                            WeightKg = 0f
                        });
                });

            modelBuilder.Entity("PokemonAPI.Models.AbilityPokemon", b =>
                {
                    b.HasOne("PokemonAPI.Models.Ability", "PokemonId")
                        .WithMany()
                        .HasForeignKey("PokemonIdId");

                    b.Navigation("PokemonId");
                });

            modelBuilder.Entity("PokemonAPI.Models.PokeTypePokemon", b =>
                {
                    b.HasOne("PokemonAPI.Models.PokeType", "PokeType")
                        .WithMany("PokeTypePokemons")
                        .HasForeignKey("PokeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Models.Pokemon", null)
                        .WithMany("PokeTypePokemons")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokeType");
                });

            modelBuilder.Entity("PokemonAPI.Models.Pokemon", b =>
                {
                    b.HasOne("PokemonAPI.Models.Ability", null)
                        .WithMany("Pokemon")
                        .HasForeignKey("AbilityId");
                });

            modelBuilder.Entity("PokemonAPI.Models.Ability", b =>
                {
                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonAPI.Models.PokeType", b =>
                {
                    b.Navigation("PokeTypePokemons");
                });

            modelBuilder.Entity("PokemonAPI.Models.Pokemon", b =>
                {
                    b.Navigation("PokeTypePokemons");
                });
#pragma warning restore 612, 618
        }
    }
}
